/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./lib/para-bench.js":
/*!***************************!*\
  !*** ./lib/para-bench.js ***!
  \***************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/* global process: readonly, module: readonly, Promise: readonly */\n\n/**\n * @typedef {Object} CpuStat\n * @property {int} n - initial int the argument was generated from\n * @property {number} time - total wall clock time spent\n * @property {number} ops - operations per second ( === time / n )\n * @property {number} [user] - CPU time spent in userspace (node.js only)\n * @property {number} [system] - CPU time spent in kernel space (node.js only)\n * @property {number} [cpu] - combined CPU time ( === user + system )\n * @property {string} [err] - if present, indicates that the output was not as expected\n * All times are in seconds, with available precision.\n * All times exclude setup, teardown, and surrounding code.\n */\n\nconst { Univariate } = __webpack_require__( /*! stats-logscale */ \"./node_modules/stats-logscale/index.js\" );\nconst { timedPromise, getTime } = __webpack_require__( /*! ./para-bench/util */ \"./lib/para-bench/util.js\" );\n\n// alas, process.cpuUsage is not available in browser, so don't rely on it.\nconst process = __webpack_require__(/*! process/ */ \"./node_modules/process/browser.js\");\nconst cpuTime = typeof process === 'object' && typeof process.cpuUsage === 'function'\n  ? () => process.cpuUsage()\n  : () => {return {}};\n\n/**\n * @desc Asynchronous parametric benchmarking library.\n *\n * A snippet of code is executed with different parameter values,\n * where parameter affects (or at least is expected to) the execution time.\n *\n * Before each execution input data is formed by a setup() hook.\n * The default one just forwards the n parameter.\n * After each execution the result may be tested to actually be correct,\n * as well as deinitialization performed, via teardown() hook.\n *\n * So instead of endlessly repeating the same code over and over again,\n * we try to plot execution time vs the parameter and hopefully find\n * interesting occasions such as cache pollution or the intersection between\n * a fast but naive implementation and a slower but asymptotically better approach.\n *\n * cpu time (user + system) is measured as well as physical (aka wall clock) time.\n *\n * @example\n *  const bench = new BigoBench().setup(myFunction).teardown(otherFunction);\n *  bench.run((arg, cb) => { for (let i = 0; i &lt; arg; i++) doStuff(); cb() })\n *    .then(console.log);\n */\nclass ParaBench {\n  constructor () {\n    this._setup    = n => n;\n    this._teardown = () => {};\n    this._solution = {};\n    this._asyncSolution = {};\n    this._onteardownfail = () => {};\n    this._progress = () => {};\n  }\n\n  /**\n   * @desc Create initial argument for function under test from a positive integer n.\n   * May also return a Promise.\n   * @returns {ParaBench}\n   * @param {(n: number) => (any | Promise<any>)} fun Converts n into arbitrary type and calls a callback on it\n   * @example bench.setup( n => new Array(n).fill( 1 ) );\n   * @example bench.setup( n => new Promise( cb => cb( new Array(n).fill( 1 ) ) ) );\n   */\n  setup (fun) {\n    this._setup = fun;\n    return this;\n  }\n\n  /**\n   * Check the validity of the result and possibly deallocate resources used for testing.\n   *\n   * The teardown function gets a hash containing the initial numeric argument (n),\n   * the input given to code in question (input) and its return value (output) and possibly\n   * som additional parameters.\n   *\n   * It must return either a false value (meaning no problems were found),\n   * a string with a problem description, or a promise resolving into one of the above.\n   *\n   * @param {({n: int, input: any, output: any}) => (false | string | Promise<false|string>)} fun fun\n   * @returns {ParaBench} self\n   */\n  teardown (fun) {\n    this._teardown = fun;\n    return this;\n  }\n\n  /**\n   * @desc Perform an action whenever teardown doesn't encounter what is was expecting.\n   * @param { (error: {n: int, name: string, err: any}) => void } fun\n   * @return {ParaBench} this (chainable)\n   */\n  onTeardownFail(fun) {\n    this._onteardownfail = fun;\n    return this;\n  }\n\n  /**\n   * @desc Execute benchmark.\n   * @param {Object} options\n   * @param {Boolean} [options.async] whether the solution in question returns via a callback\n   * @param {String} [options.name] identifier of the solution in question\n   * @param {int} options.arg - positive integer parameter to generate input from.\n   * @param {number} [options.timeout] - (in milliseconds) when to declare the probe is taking too long\n   * @param {(input: any, callback: (retVal: any) => void) => void} userCode (arg, callback) => {...; callback(retVal)}\n   * @returns {Promise<CpuStat>}\n   */\n  probe (options, userCode) {\n    const n = options.arg;\n\n    if (!(Number.isInteger(n) && n > 0))\n      throw new Error(\"probe requires positive integer {arg} parameter\");\n\n    return timedPromise( 'Setup', options.timeout, resolve => {\n      // TODO: can we optimize out a couple resolve() calls here?\n      const input = this._setup(n);\n      if (input instanceof Promise)\n        input.then(resolve)\n      else\n        resolve(input);\n    }).then( arg => timedPromise( 'Solution', options.timeout, resolve => {\n      // we have to duplicate a bit of code here\n      // to reduce influencing the measurement result.\n      if (options.async) {\n        /* begin critical section */\n        const date1 = getTime();\n        const cpu1 = cpuTime();\n        userCode(arg, retVal => {\n          const date2 = getTime();\n          const cpu2 = cpuTime();\n          /* end critical section */\n          resolve({arg, retVal, date1, date2, cpu1, cpu2});\n        });\n      } else {\n        /* begin critical section */\n        const date1 = getTime();\n        const cpu1 = cpuTime();\n        const retVal = userCode(arg);\n        const date2 = getTime();\n        const cpu2 = cpuTime();\n        console.log()\n        /* end critical section */\n        resolve({arg, retVal, date1, date2, cpu1, cpu2});\n      }\n    })).then( hash => timedPromise( 'Teardown', options.timeout, resolve => {\n        const info = {n, input: hash.arg, output: hash.retVal};\n        const err = this._teardown(info);\n        if (err instanceof Promise)\n          err.then( err => resolve({err, ...hash}));\n        else\n          resolve({err, ...hash});\n    })).then( hash => new Promise( resolve => {\n      const { cpu1, cpu2, date1, date2, err } = hash;\n      const time = (date2 - date1) / 1000;\n\n      const ret = { n, time, iter: time / n };\n      if (err) {\n        ret.err = err;\n        this._onteardownfail({ n, err, name: options.name });\n      }\n      if (cpu2.user !== undefined) {\n        ret.user = (cpu2.user - cpu1.user) / 10 ** 6;\n        ret.system = (cpu2.system - cpu1.system) / 10 ** 6;\n        ret.cpu = ret.user + ret.system;\n      }\n\n      resolve(ret);\n    }));\n  }\n\n  /**\n   *\n   * @param name\n   * @param {(arg: any) => any} impl\n   * @return {ParaBench}\n   */\n  add(name, impl) {\n    if (typeof impl === 'function') {\n      this._solution[name] = impl;\n      this._asyncSolution[name] = false;\n    } else if (!impl) {\n      delete this._solution[impl];\n    } else {\n      throw new Error('A solution must be a function (or null to erase one)');\n    }\n    return this;\n  }\n\n  /**\n   *\n   * @param name\n   * @param {(arg: any, cb: (retVal: any) => void) => void} impl\n   * @return {ParaBench}\n   */\n  addAsync(name, impl) {\n    if (typeof impl === 'function') {\n      this._solution[name] = impl;\n      this._asyncSolution[name] = true;\n    } else if (!impl) {\n      delete this._solution[impl];\n    } else {\n      throw new Error('A solution must be a function (or null to erase one)');\n    }\n    return this;\n  }\n\n  /**\n   *\n   * @return {string[]} list of code variants added this far with addAsync()\n   */\n  list() {\n     return Object.keys(this._solution).sort();\n  }\n\n  /**\n   *\n   * @param {number} timeoutMs in milliseconds\n   * @param {int} arg\n   * @return {Promise<Object<string, string> | undefined>}\n   */\n  check(timeoutMs = 1, arg = 1) {\n     const gen = Object.keys(this._solution).values();\n\n     const bad = {};\n     const iterate = (resolve) => {\n       const name = gen.next().value;\n       const async = this._asyncSolution[name];\n       if (name === undefined)\n         return resolve(Object.keys(bad).length === 0 ? undefined : bad);\n\n       this.probe({arg, name, timeout: timeoutMs, async }, this._solution[name])\n           .then(unused => iterate(resolve))\n           .catch(reason => {\n             bad[name] = reason;\n             iterate(resolve);\n           });\n     };\n     return new Promise(iterate);\n  }\n\n  /**\n   *\n   * @param {(soFar: object) => void} fun\n   * @param {int} fun.soFar.n\n   * @param {string} fun.soFar.name\n   * @param {CpuStat} fun.soFar.result\n   * @param {number} fun.soFar.totalTime\n   * @param {number} fun.soFar.percent\n   * @return {ParaBench}\n   */\n  progress(fun) {\n     this._progress = fun;\n     return this;\n  }\n\n  /**\n   * @desc Compare different solutions of the same problem, returning\n   * a hash with solution runtime data (through a promise).\n   * @param {object} options\n   * @param {array<int>} [options.argList] argument to compare at\n   * @param {int} [options.minArg]\n   * @param {int} [options.maxArg]\n   * @param {number} [options.maxTime]\n   * @param {int} [options.repeat]\n   * @returns {Promise<Object<string, Array<CpuStat>>>}\n   * @example bench.compare( {minArg: 1, maxArg: 10**6, maxTime: 1] }, { qSort, bubbleSort, mergeSort } )\n   *              .then( data => { for (let name in data) { plotRuntime( data[name] )}} );\n   */\n  compare (options = {}) {\n    const minArg  = options.minArg ?? 1;\n    const maxArg  = options.maxArg ?? Infinity;\n    const maxTime = options.maxTime;\n    const repeat  = options.repeat ?? 1;\n\n    const variants = { ...this._solution };\n\n    if (maxArg === Infinity && !maxTime && !options.argList)\n      throw new Error('One of maxArg, maxTime, of argList must be specified');\n\n    const probes = options.argList ?? (function* () {\n      for (let i = minArg; i <= maxArg; i = Math.ceil(i * 4 / 3))\n        yield i;\n    })();\n\n    const pending = new Set( Object.keys(variants) );\n\n    const gen = (function* () {\n      for (const n of probes) {\n        // if all variants have been exhausted (e.g. due to time limit),\n        // stop here and don't continue with the rest of probes\n        if (pending.size === 0)\n          return;\n        for (const name in variants) {\n          if (!pending.has(name))\n            continue;\n          for (let i = 0; i < repeat; i++) {\n            yield {name, n};\n          }\n        }\n      }\n    })();\n\n    const out = {};\n    const timeSpent = {};\n    for (const key in variants) {\n      out[key] = [];\n      timeSpent[key] = 0;\n    }\n\n    // progress bar only:\n    let count = 0;\n    let totalTime = 0;\n    const totalMaxTime = (maxTime ?? 0) * Object.keys(variants).length;\n\n    const iterate = resolve => {\n      const next = gen.next().value;\n      if (!next)\n        return resolve(out);\n\n      const { name, n } = next;\n      const async = this._asyncSolution[name];\n      return this.probe({arg: n, name, async}, variants[name]).then(piece => {\n        const cpu = timeSpent[name] += piece.time;\n        if (cpu > maxTime)\n          pending.delete(name); // had enough\n        out[name].push(piece);\n        this._progress({\n          name,\n          n,\n          result: piece,\n          count: ++count,\n          cumulativeTime: cpu,\n          maxTime,\n          totalTime: totalTime += piece.time,\n          totalMaxTime,\n        });\n        // Next line could've been just iterate(resolve),\n        // but that locks up the browser somehow.\n        setTimeout(() => iterate(resolve), 0);\n      });\n    }\n\n    return new Promise(iterate);\n  }\n\n  /**\n   * @static\n   * @desc Process raw comparison data into something useful for e.g. plotting\n   * @param {Object<string, Array<CpuStat>>} comparison Results of a previous compare() call.\n   * @param {Object} options\n   * @param {number} options.minTime resolution (in second). Default is 0.004.\n   * @param {\"time\"|\"cpu\"} options.useStat which of the measures stats to use. Default is 'time' (physical time)\n   * @returns {Object<n : Array<int>, times : Object<string,Array<number>> >, ops : Object<string, Array<number>>} data\n   */\n  static flattenData(comparison, options = {}) {\n    const threshold = options.minTime || 0.004;\n    const useStat   = options.useStat || 'time';\n\n    const intermediate = {};\n    for (let name in comparison) {\n      const map = aggregateProbes(comparison[name], useStat);\n      intermediate[name] = mapProbes(\n          map,\n          stat => stat.count() < 14\n            ? stat.median()\n            : stat.clone({ltrim: 7, rtrim: 7, winsorize: true}).mean(),\n          mean => mean >= threshold\n      );\n    }\n\n    const argList = commonKeys(Object.values(intermediate));\n\n    // finally output processed data\n    const out = { n: argList, times: {}, ops: {} };\n\n    for(let name in comparison) {\n      out.times[name] = [];\n      out.ops[name] = [];\n      for (let n of argList) {\n        const duration = intermediate[name].get(n)\n        out.times[name].push(duration);\n        out.ops[name].push(n / duration);\n      }\n    }\n\n    return out;\n  }\n\n\n  /**\n   *\n   * @param {int} attempts - how many timer ticks to wait for. default = 15.\n   * @return {number} timer resolution in seconds\n   */\n  static getTimeRes (attempts = 15) {\n    const first = getTime();\n    let last = first;\n    let count = attempts;\n    while (count > 0) {\n      const now = getTime();\n      if (now === last)\n        continue;\n      last = now;\n      count--;\n    }\n    return (last - first) / (attempts * 1000);\n  }\n}\n\n\n\n\nParaBench.prototype.flattenData = ParaBench.flattenData;\nParaBench.prototype.getTimeRes = ParaBench.getTimeRes;\n\nmodule.exports = { ParaBench };\n\n/* Utility functions */\n\n/**\n *\n * @param {CpuStat[]} probes\n * @param {string} what\n * @returns {Map<Number, Univariate>}\n */\nfunction aggregateProbes (probes, what= 'time') {\n  const out = new Map();\n  for (const entry of probes) {\n    if (!out.has(entry.n))\n      out.set(entry.n, new Univariate({precision: 1e-12}));\n    out.get(entry.n).add(entry[what]);\n  }\n  return out;\n}\n\n/**\n *\n * @param {Map<number, Univariate>} probes\n * @param {function(Univariate): any} handler\n * @param {function(any): boolean} [filter]\n * @returns {Map<number, any>}\n */\nfunction mapProbes (probes, handler, filter=_ => true) {\n  return new Map(\n      [...probes]\n          .map(pair => [pair[0], handler(pair[1])])\n          .filter(pair => filter(pair[1]))\n  )\n}\n\nfunction commonKeys(maps) {\n  const union = new Set();\n  for (const entry of maps) {\n    for (const pair of entry) {\n      union.add(pair[0]);\n    }\n  }\n  return [...union].sort((x, y) => x - y);\n}\n\n\n\n//# sourceURL=webpack://parametric-benchmark/./lib/para-bench.js?");

/***/ }),

/***/ "./lib/para-bench/util.js":
/*!********************************!*\
  !*** ./lib/para-bench/util.js ***!
  \********************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * @param {string} name\n * @param {number} milliseconds\n * @param {(callback: (result: any) => void) => void} code\n * @return {Promise}\n */\nfunction timedPromise(name, milliseconds, code) {\n    let clock;\n    return new Promise( (resolve, reject) => {\n        if (milliseconds > 0)\n            clock = setTimeout(\n                () => {\n                    reject(name + ' timed out after ' + milliseconds + ' ms')\n                },\n                milliseconds\n            );\n        code( clock\n            ? result => {\n                clearTimeout();\n                resolve(result);\n            }\n            : resolve\n        );\n    });\n}\n\nconst getTime =\n    (typeof process === 'object' && typeof process.hrtime === 'function')\n        ? () => { const [sec, nano] = process.hrtime(); return sec * 1000 + nano / 1_000_000 }\n        :\n    (typeof performance === 'object' && typeof performance.now === 'function')\n        ? () => performance.now()\n        : () => (new Date() - 0);\n\nmodule.exports = { timedPromise, getTime };\n\n\n//# sourceURL=webpack://parametric-benchmark/./lib/para-bench/util.js?");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/***/ ((module) => {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack://parametric-benchmark/./node_modules/process/browser.js?");

/***/ }),

/***/ "./node_modules/stats-logscale/index.js":
/*!**********************************************!*\
  !*** ./node_modules/stats-logscale/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("(() => {\n    const { Binning } = __webpack_require__(/*! ./lib/binning.js */ \"./node_modules/stats-logscale/lib/binning.js\");\n    const { Univariate } = __webpack_require__(/*! ./lib/univariate.js */ \"./node_modules/stats-logscale/lib/univariate.js\");\n\n    // TODO should we even bother doing it? Use window.Univariate?.. Just module.exports?..\n    // Name must be short & reflect (math, statistics, logarithm)\n    const logstat = { Binning, Univariate };\n\n    // We may have both window & module if running as a dependency under webpack\n    if (typeof window !== 'undefined')\n        window.logstat = logstat;\n    if (true)\n        module.exports = logstat;\n})();\n\n\n//# sourceURL=webpack://parametric-benchmark/./node_modules/stats-logscale/index.js?");

/***/ }),

/***/ "./node_modules/stats-logscale/lib/binning.js":
/*!****************************************************!*\
  !*** ./node_modules/stats-logscale/lib/binning.js ***!
  \****************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nclass Binning {\n    constructor (args = {}) {\n        let base = args.base || 1.001;\n        let precision = args.precision || 1E-9;\n\n        // Make sure base ** (some int) === 2\n        if (!(base > 1) || !(base < 1.5))\n            throw new Error('base must be a number between 1 and 1.5');\n        base += 1e-9; // TODO explain - we must round-trip w/o getting \"eaten\"\n        base = 2 ** (1 / Math.ceil(Math.log(2) / Math.log(base)));\n        if (base === 1)\n            throw new Error('base too close to 1');\n\n        // Linear threshold. Inv: (base-1) * thresh === (minimal bin width) === precision!\n        precision = Number.parseFloat('' + precision); // make sure (de)serealization is ok\n        const equalBins = Math.ceil( 1 / (base - 1) );\n        const thresh = precision * equalBins; // recalc to minimize rounding errors\n\n        // TODO Make sure 1 is the center of a bin\n\n        this._thresh = thresh;\n        this._precision = precision;\n        this._base = base;\n    }\n\n    getBase () {\n        return this._base;\n    }\n\n    getPrecision () {\n        return this._precision;\n    }\n\n    // Rounding to nearest bin first, TODO linear split\n    round (x) {\n        if (typeof x !== 'number')\n            x = Number.parseFloat(x);\n        if (Number.isNaN( x ))\n            throw new Error('Attempt to round a non-numeric value: ' + x);\n        if (x < 0) return -this.round(-x);\n        if (x < this._thresh)\n            return Math.round( x / this._precision ) * this._precision;\n        else\n            return this._thresh * this._base ** Math.round( Math.log(x / this._thresh) / Math.log(this._base) );\n    }\n\n    upper (x) {\n        if (x < 0)\n            return -this.lower(-x);\n        x = this.round(x);\n        if (x < this._thresh)\n            return x + this._precision / 2;\n        return x * Math.sqrt(this._base);\n    }\n\n    lower (x) {\n        if (x < 0)\n            return -this.upper(-x);\n        x = this.round(x);\n        if (x <= this._thresh)\n            return x - this._precision / 2;\n        return x / Math.sqrt(this._base);\n    }\n\n    shorten (x, y) {\n        if (x === undefined)\n            return x;\n        return y === undefined\n            ? shorten(this.lower(x), this.upper(x))\n            : shorten(x, y);\n    }\n}\n\nfunction shorten (min, max, base = 10) {\n    // TODO validate, swap, diff sign, etc\n    if (min === max)\n        return min;\n    if (min * max <= 0)\n        return 0;\n    // min & max are of the same sign now\n    if (max < 0)\n        return -shorten(-max, -min, base);\n    if (min > max)\n        return  shorten( max, min, base);\n\n    // Assume scale := base ** power\n    // Pick the smallest power such that ceil(min * scale) <= floor(max * scale)\n    // (as in: min & max are separated)\n\n    let power = -Math.floor( Math.log(max - min) / Math.log(base) );\n    // base ** power should now distinguish max and min\n\n    // decrease scale while the separation holds\n    while (Math.ceil( min * base ** power ) <= Math.floor( max * base ** power ))\n        power--;\n    power++; // take 1 step back\n\n    // Try to avoid precision loss in negative **, positive seems ok\n    return power >= 0\n        ? Math.ceil( min * base **  power ) / base **  power\n        : Math.ceil( min / base ** -power ) * base ** -power;\n}\n\nmodule.exports = { Binning, shorten };\n\n\n//# sourceURL=webpack://parametric-benchmark/./node_modules/stats-logscale/lib/binning.js?");

/***/ }),

/***/ "./node_modules/stats-logscale/lib/univariate.js":
/*!*******************************************************!*\
  !*** ./node_modules/stats-logscale/lib/univariate.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst { Binning } = __webpack_require__( /*! ./binning.js */ \"./node_modules/stats-logscale/lib/binning.js\" );\n\nconst version = 'stats-logscale/univariate@1.0'; // semver w/o patch part\n\n/**\n *  @classdesc Univariate statistical distribution analysis tool\n *  It works by sorting data into bins.\n *  This bin size depends on absolute & relative precision\n *  of the incoming data.\n *  Thus, very large samples can be processed fast\n *  with reasonable memory usage.\n */\nclass Univariate extends Binning {\n    /**\n     * @param {Object} args\n     * @param {Number} [args.base]      Must be between 1 and 1.5. Default is 1.001\n     * @param {Number} [args.precision] Must be positive. Default is 1E-9.\n     * @param {Array}  [args.bins]      See addWeighted() for description\n     */\n    constructor (args = {}) {\n        super(args);\n        this.storage = new Map(); // round(number) => count\n        this._count = 0;\n        this._cache = {};\n        this.neat = new Neat(this);\n\n        if (args.bins)\n            this.addWeighted(args.bins);\n    }\n\n    /**\n     * @desc Add value(s) to sample.\n     * @param {...Number} data Number(s) to add to sample\n     * @returns {Univariate} this (chainable)\n     * @example\n     * for (let i=0; i<10000; i++)\n     *    stat.add(-Math.log(Math.random()));\n     * // creates exponential distribution\n     * @example\n     * stat.add( 1,2,3,4,5,6 );\n     * // a d6\n     */\n    add ( ...data ) {\n        this._cache = {};\n        data.forEach( x => {\n            const bin = this.round(x);\n            const count = this.storage.get(bin) ?? 0;\n            this.storage.set(bin, count + 1);\n            this._count++; // round() may throw, so increase counter one by one\n        });\n        return this;\n    }\n\n    /**\n     * @desc Add values to sample, with weights.\n     * @param {number[][]} pairs Each pair is an array with two numbers:\n     * [ value, quantity ]. Negative quantity is allowed and means we're erasing data.\n     * @returns {Univariate} this (chainable)\n     * @example\n     * stat.addWeighted( [ [0.1, 5], [0.2, 4], [0.3, 3] ] )\n     * // adds 0.1 x 5, 0.2 x 4, 0.3 x 3\n     */\n    addWeighted ( pairs ) {\n        this._cache = {};\n        // TODO validate\n        pairs.forEach( entry => {\n            const x = entry[0];\n            const n = Number.parseFloat( entry[1] ); // fractional weights possible\n            if (Number.isNaN(n))\n                throw new Error('Attempt to provide a non-numeric weight');\n\n            const bin = this.round( x );\n\n            const count = (this.storage.get(bin) ?? 0) + n;\n\n            if (count <= 0) {\n                this.storage.delete(bin);\n                this._count += n - count;\n            } else {\n                this.storage.set(bin, count);\n                this._count += n;\n            }\n        });\n        return this;\n    }\n\n    /**\n     *  @desc Serialization of the sample.\n     *  @returns {Object} plain data structure that can serve\n     *      as an argument to new().\n     */\n    toJSON () {\n        return {\n            version,\n            precision: this.getPrecision(),\n            base:      this.getBase(),\n            bins:      this.getBins(),\n        }\n    }\n\n    /**\n     *   @desc create a copy of sample object, possibly modifying precision\n     *   settings and/or filtering data.\n     *   @param {Object} [args]\n     *   @param {Number} [args.precision] Override absolute precision\n     *   @param {Number} [args.base] Override relative precision\n     *   @param {Number} [args.min] Filter values less than this\n     *   @param {Number} [args.max] Filter values greater than this\n     *   @param {Number} [args.ltrim] Filter values less than Xth percentile\n     *   @param {Number} [args.rtrim] Filter values greater than 100-Xth percentile\n     *   @param {Boolean} [args.winsorize] If a data point doesn't fit the bounds,\n     *       truncate it instead of discarding.\n     *   @param {function(Number): Number} [args.transform] Apply function to sample data\n     *   @returns {Univariate} copy of the original object\n     */\n    clone (args = {}) {\n        // TODO better name?\n        let bins = this.getBins(args);\n        if (args.transform)\n            bins = bins.map( x => [args.transform(x[0]), x[1]] );\n\n        return new Univariate( {\n            precision: args.precision ?? this.getPrecision(),\n            base:      args.base      ?? this.getBase(),\n            bins,\n        } );\n    }\n\n    /**\n     *  @desc  Returns a sorted list of pairs containing numbers in the sample\n     *          and their respective counts.\n     *          See addWeighted().\n     */\n    getBins (args) {\n        if (!this._cache.data) {\n            this._cache.data = [...this.storage]\n                .sort( (x, y) => x[0] - y[0] );\n        }\n        if (!args)\n            return this._cache.data;\n\n        const min = Math.max(\n            args.min ?? -Infinity,\n            this.percentile( args.ltrim ?? 0 ),\n        );\n        const max = Math.min(\n            args.max ?? +Infinity,\n            this.percentile( 100 - (args.rtrim ?? 0) ),\n        );\n        // TODO allow to skip buckets with too little data - param name???\n\n        if (!args.winsorize)\n            return this._cache.data.filter( x => x[0] >= min && x[0] <= max );\n\n        const first = [this.round(min), 0];\n        const last  = [this.round(max), 0];\n        const out = [first];\n        for (const [bin, count] of this._cache.data) {\n            if (bin <= first[0])\n                first[1] += count;\n            else if (bin >= last[0])\n                last[1] += count;\n            else out.push([bin, count]);\n        }\n        if (last[1] > 0)\n            out.push(last);\n        return out;\n    }\n\n    /**\n     *   @desc     Number of values in the sample.\n     *   @returns   {Integer} count\n     */\n    count () {\n        return this._count;\n    }\n\n    /**\n     *   @desc Minimal value in the sample.\n     *          This value is somewhat rounded down to guarantee\n     *          it is less than _any_ value in the sample.\n     *   @returns {Number} Minimum value\n     */\n    min () {\n        const data = this.getBins();\n        return this.lower(data[0][0]);\n    }\n\n    /**\n     *   @desc Maximal value in the sample.\n     *          This value is somewhat rounded up to guarantee\n     *          it is greater than _any_ value in the sample.\n     *   @returns {Number} Maximum value\n     */\n    max () {\n        const data = this.getBins();\n        return this.upper(data[data.length - 1][0]);\n    }\n\n    /**\n     *   @desc Sum of arbitrary function over the sample.\n     *   @param {Function} fun Number->Number\n     *   @returns {Number}\n     *   @example\n     *   stat.sumOf( x => 1 ); // same as stat.count()\n     *   @example\n     *   stat.sumOf( x => x ); // same as stat.count() * stat.mean()\n     */\n    sumOf (fun) {\n        let s = 0;\n        [...this.storage].forEach( entry => { s += entry[1] * fun(entry[0]) } );\n        return s;\n    }\n    // TODO integralOf that takes bucket width into account\n\n    /**\n     *  @desc Calculate expected value of a given function over the sample.\n     *  @param {function(Number): Number} fun\n     *  @returns {Number}\n     */\n    E (fun) {\n        return this._count ? this.sumOf( fun ) / this._count : undefined;\n    }\n\n    /**\n     * @desc Average value of the sample.\n     * @returns {Number}\n     */\n    mean () {\n        return this._count ? this.sumOf( x => x ) / this._count : undefined;\n    }\n\n    /**\n     * @desc Standard deviation of the sample.\n     * Bessel's correction is used:\n     * stdev = sqrt( E<(x - E<x>)**2> * n/(n-1) )\n     * @returns {Number} Standard deviation\n     */\n    stdev () {\n        // TODO better corrections?\n        if (this._count < 2)\n            return undefined;\n        const mean = this.mean();\n        return Math.sqrt( this.sumOf( x => (x - mean) * (x - mean) )\n            / (this._count - 1) ); // Bessel's correction\n    }\n\n    /**\n     *  @desc Skewness is a measure of the asymmetry of a distribution.\n     *  Equals to 3rd standardized moment times n^2/(n-1)(n-2) correction\n     *  Undefined if there are less than 3 data points.\n     *  @returns {Number | undefined}\n     */\n    skewness () {\n        const n = this.count();\n        if (n < 3)\n            return;\n        const correction = n * n / ((n - 1) * (n - 2));\n        return correction * this.momentStd(3);\n    }\n\n    /**\n     *  @desc Kurtosis is a measure of how much of the distribution is\n     *        contained in the \"tails\".\n     *        Equals to 4th standardized moment minus 3,\n     *        with a correction.\n     *  @returns {Number | undefined}\n     */\n    kurtosis () {\n        const n = this.count();\n        if (n < 4)\n            return;\n\n        // taken from https://en.wikipedia.org/wiki/Kurtosis\n        // not sure where it comes from\n        // but if Excel is doing that, so do we.\n        const corr1 = n * n * (n + 1) / ((n - 1) * (n - 2) * (n - 3));\n        const corr2 = (n - 1) * (n - 1) / ((n - 2) * (n - 3));\n\n        return this.momentStd(4) * corr1 - 3 * corr2;\n    }\n\n    /**\n     *  @desc Moment of nth power, i.e. E((x-offset)**power)\n     *  @param {Integer} power Power to raise to.\n     *  @param {Number} [offset] Number to subtract. Default is mean.\n     *  @returns {Number}\n     */\n    moment (power, offset) {\n        if (!Number.isInteger(power))\n            throw new Error('Cannot calculate non-integer moment (did you mean momentAbs?)');\n        if (offset === undefined)\n            offset = this.mean();\n        return this.E( x => (x - offset) ** power );\n    }\n\n    /**\n     *  @desc Absolute moment of nth power, i.e. E(|x-offset|**power)\n     *  @param {Number} power Power to raise to. May be fractional. Default is 1.\n     *  @param {Number} [offset] Number to subtract. Default is mean.\n     *  @returns {Number}\n     */\n    momentAbs (power = 1, offset) {\n        if (offset === undefined)\n            offset = this.mean();\n        return this.E( x => Math.abs(x - offset) ** power );\n    }\n\n    /**\n     *  @desc Standardized moment of nth power, i.e. nth moment / stdev**n.\n     *  @param {Integer} power\n     *  @returns {Number}\n     */\n    momentStd (power) {\n        return this.moment(power) / this.stdev() ** power;\n    }\n\n    /**\n     *  @desc A number x such that P(value <= x) === p\n     *  @param {Number} p from 0 to 1\n     *  @return {Number} value\n     *  @example\n     *  const stat = new Univariate();\n     *  stat.add( 1,2,3,4,5 );\n     *  stat.quantile( 0.2 ); // slightly greater than 1\n     *  stat.quantile( 0.5 ); // 3\n     */\n    quantile (p) {\n        const target = p * this._count;\n\n        const cumulative = this._cumulative();\n\n        let l = 0;\n        let r = cumulative.length;\n\n        // console.log('target=' + target);\n\n        while ( l + 1 < r ) {\n            const m = Math.floor( (r + l) / 2 );\n            // console.log( '['+l+', '+r+'): middle='+m+':', cumulative[m]);\n\n            if (cumulative[m][1] >= target)\n                r = m;\n            else\n                l = m;\n        }\n\n        const start = this.lower(cumulative[l][0]);\n        const width = this.upper(cumulative[l][0]) - start;\n\n        // Division by zero must not happen as zero-count buckets\n        // should not exist.\n        return start + width * (target - cumulative[l][1]) / (cumulative[l][2] - cumulative[l][1]);\n    }\n\n    /**\n     *  @desc Returns x such that P(value < x) === p%.\n     *        Same as quantile(p/100).\n     *  @param {Number} p\n     *  @returns {Number} x\n     */\n    percentile (p) {\n        return this.quantile( p / 100 );\n    }\n\n    /**\n     *  @desc Returns x such that half of the sample is less than x.\n     *        Same as quantile(0.5).\n     *  @returns {Number} x\n     */\n    median () {\n        return this.quantile(0.5);\n    }\n\n    /**\n     *  @desc Cumulative distribution function, i.e. P(value < x).\n     *  This is the inverse of quantile.\n     *  @param {Number} x\n     *  @returns {Number} probability\n     */\n    cdf (x) {\n        return this._rawCdf(x) / this._count;\n    }\n\n    _rawCdf (x) {\n        const cumulative = this._cumulative();\n        const lookup = this.round(x);\n\n        // binary search\n        // Look for the leftmost bucket >= round(x)\n        // Count = total to the left of that bucket + maybe partial\n        let l = 0;\n        let r = cumulative.length;\n\n        while (l < r) {\n            const m = Math.floor((r + l) / 2);\n            // console.log('['+l+', '+r+'): mid='+m+'; bin=', cumulative[m]);\n            if (cumulative[m][0] < lookup)\n                l = m + 1;\n            else\n                r = m;\n        }\n\n        // console.log('Looked for '+x+', found: ', [cumulative[l - 1], cumulative[l]] );\n\n        if (l >= cumulative.length)\n            return this._count;\n\n        const prior = l > 0 ? cumulative[l - 1][2] : 0;\n        const partial = lookup !== cumulative[l][0]\n            ? 0\n            : (cumulative[l][2] - cumulative[l][1]) // x'th bucket total\n                * (x - this.lower(x))               // part left of x\n                / (this.upper(x) - this.lower(x))   // bucket width\n\n        return prior + partial;\n    }\n\n    /**\n     *   @desc Histogram based on the sample\n     *   @param {Object} args\n     *   @param {Integer} [args.count] Number of bars in the histogram.\n     *                                 Default is 10.\n     *   @param {Number}  [args.scale] If given, make sure it's\n     *   the height of the highest bar.\n     *   @return {Array}  Array of triplets: [barHeight, leftBorder, rightBorder ].\n     *   rightBorder equals to the next bar's leftBorder.\n     */\n    histogram (args = {}) {\n        // TODO options\n        if (!this._count)\n            return [];\n        const min = this.min();\n        const max = this.max();\n        const count = args.count || 10;\n\n        const hist = []; // [ count, lower, upper ], ...\n        let edge = min;\n        const step = (max - min) / count;\n        for (let i = 0; i < count; i++)\n            hist.push( [this._rawCdf(edge + step), edge, edge += step] );\n\n        // Differenciate (must go backward!)\n        for (let i = hist.length; i-- > 1; )\n            hist[i][0] -= hist[i - 1][0];\n\n        hist[0][0] -= this._rawCdf(min);\n\n        if (args.scale) {\n            // scale to a factor e.g. for drawing pictures\n            let max = 0;\n            for (let i = 0; i < hist.length; i++) {\n                if (max < hist[i][0])\n                    max = hist[i][0];\n            }\n\n            for (let i = 0; i < hist.length; i++)\n                hist[i][0] = hist[i][0] * args.scale / max;\n        }\n\n        return hist;\n    }\n\n    _cumulative () {\n        // integral of sorted bins\n        // [ [ bin_center, sum_before, sum_after ], ... ]\n        if (!this._cache.cumulative) {\n            const data = this.getBins();\n            const cumulative = [];\n            let sum = 0;\n            for (let i = 0; i < data.length; i++)\n                cumulative.push( [data[i][0], sum, sum += data[i][1]] );\n\n            this._cache.cumulative = cumulative;\n        }\n        return this._cache.cumulative;\n    }\n}\n\n// Memoize! Replace methods with cached counterparts\n// '+' at the end if method has arguments\n[\n    'cdf+',\n    'kurtosis',\n    'max',\n    'mean',\n    'min',\n    'moment+',\n    'momentAbs+',\n    'momentStd+',\n    'quantile+',\n    'skewness',\n    'stdev',\n].forEach( method => {\n    const hasArg = !!method.match(/\\+/);\n    if (hasArg)\n        method = method.replace( '+', '' );\n    const orig = Univariate.prototype[method];\n    if (typeof orig !== 'function')\n        throw new Error('method \"' + method + '\" is cached but never defined');\n    Univariate.prototype[method] = hasArg\n        ? function (...arg) {\n            if (this._count === 0)\n                return undefined;\n            if (this._cache[method] === undefined)\n                this._cache[method] = {};\n            const key = arg.join(':');\n            if (this._cache[method][key] === undefined)\n                this._cache[method][key] = orig.apply( this, arg );\n            return this._cache[method][key];\n        }\n        : function () {\n            if (this._count === 0)\n                return undefined;\n            if (this._cache[method] === undefined)\n                this._cache[method] = orig.apply( this );\n            return this._cache[method];\n        };\n});\n\nclass Neat {\n    constructor (main) {\n        this._main = main;\n    }\n\n    min () {\n        if (!this._main._count)\n            return undefined;\n        const data = this._main.getBins();\n        return this._main.shorten(data[0][0]);\n    }\n\n    max () {\n        if (!this._main._count)\n            return undefined;\n        const data = this._main.getBins();\n        return this._main.shorten(data[data.length - 1][0]);\n    }\n}\n\n[\n    'E',\n    'kurtosis',\n    'mean',\n    'median',\n    'moment',\n    'momentAbs',\n    'momentStd',\n    'percentile',\n    'quantile',\n    'skewness',\n    'stdev',\n    'sumOf',\n].forEach( fun => {\n    Neat.prototype[fun] = function (arg) {\n        return this._main.shorten( this._main[fun](arg) );\n    }\n});\n\n[\n    'cdf',\n    'count',\n].forEach( fun => {\n    Neat.prototype[fun] = function (arg) {\n        return this._main[fun](arg);\n    }\n});\n\nmodule.exports = { Univariate };\n\n\n//# sourceURL=webpack://parametric-benchmark/./node_modules/stats-logscale/lib/univariate.js?");

/***/ }),

/***/ "./web-index.js":
/*!**********************!*\
  !*** ./web-index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * This file is for generating a compressed script to be used within browser.\n */\n\nconst { ParaBench } = __webpack_require__( /*! ./lib/para-bench */ \"./lib/para-bench.js\");\nwindow.ParaBench = ParaBench;\n\n\n//# sourceURL=webpack://parametric-benchmark/./web-index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./web-index.js");
/******/ 	
/******/ })()
;